openapi: 3.1.0
info:
  title: API сервер для проекта «Шесть городов».
  description: |-
    * Список ресурсов и маршрутов сервера «Шесть городов».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
tags:
  - name: offers
    description: Действия с объявлениями.
  - name: comments
    description: Действия с комментариями.
  - name: users
    description: Действия с пользователем.

paths:
  /offers:
    get:
      summary: Получить список предложений по аренде
      description: Получить список предложений по аренде отсортированный по дате публикации.
      parameters:
        - name: limit
          in: query
          description: Количество предложений для возврата (максимум 60)
          schema:
            type: integer
            minimum: 1
            maximum: 60
            default: 60
      responses:
        '200':
          description: Список предложений успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offer'
        '400':
          description: Некорректный запрос

    post:
      tags:
        - offers
      summary: Создание предложения по аренде
      description: Создаёт предложения по аренде.

      requestBody:
        description: Информация для создания нового предложения по аренде.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newOffer'
        required: true

      responses:
        "201":
          description: предложение создано. Объект предложения.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'

  /offers/{id}:
    get:
      summary: Получить детальную информацию по предложению
      description: Сервис предоставляет ресурс для получения детальной информации по одному предложению.
      parameters:
        - name: id
          in: path
          description: Идентификатор предложения
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Детальная информация по предложению успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        '400':
          description: Некорректный запрос
        '404':
          description: Предложение не найдено

    patch:
      tags:
        - offers
      summary: Редактирование предложения по аренде
      description: Редактирует предложения по аренде.
      parameters:
        - name: id
          in: path
          description: Идентификатор предложения
          required: true
          schema:
            type: string

      requestBody:
        description: Информация для редактирования предложения по аренде.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/offer'
        required: true

      responses:
        "201":
          description: предложение отредактировано. Объект предложения.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'

    delete:
      tags:
        - offers
      summary: Удаляет предложения по аренде
      description: Удаляет предложения по аренде.
      parameters:
        - name: id
          in: path
          description: Идентификатор предложения
          required: true
          schema:
            type: string

      responses:
        '204':
          description: Удалено

  /offers/{id}/comments:
    get:
      summary: Получить список комментариев для предложения
      description: Сервис предоставляет ресурс для получения списка комментариев для определенного предложения.
      parameters:
        - name: id
          in: path
          description: Идентификатор предложения
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Список комментариев успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/сomment'
        '400':
          description: Некорректный запрос
        '404':
          description: Предложение не найдено

    post:
      summary: Опубликовать комментарий
      description: Опубликовать комментарий.
      parameters:
        - name: id
          in: path
          description: Идентификатор предложения
          required: true
          schema:
            type: string

      requestBody:
        description: Информация для комментария.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/сommentAuth'
        required: true

      responses:
        '201':
          description: Комментарий успешно опубликован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/сomment'
        '400':
          description: Некорректный запрос
        '404':
          description: Предложение не найдено

  /favorites:
    get:
      summary: Получить список избранных предложений
      description: Получение предложений, добавленных в избранное.

      responses:
        '200':
          description: Список избранных предложений успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offer'
        '401':
          $ref: '#/components/responses/unauthorizedError'

  /favorites/{offerId}:
    post:
      summary: Добавить предложение в избранное
      description: Сервис предоставляет ресурс для добавления предложения в список избранных.
      security:
        - apiKeyAuth: []
      parameters:
        - name: offerId
          in: path
          description: Идентификатор предложения
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Предложение успешно добавлено в избранное
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          description: Предложение не найдено

    delete:
      summary: Удалить предложение из избранного
      description: Сервис предоставляет ресурс для удаления предложения из списка избранных.
      parameters:
        - name: offerId
          in: path
          description: Идентификатор предложения
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Предложение успешно удалено из избранного
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '404':
          description: Предложение не найдено

  /premium:
    get:
      parameters:
      - in: query
        name: city
        type: string
      responses:
        '200':
          description: Список премиальных предложений по городу успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offer'
        '400':
          description: Некорректный запрос

  /login:
    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю

      responses:
        '200':
          description: Авторизован, данные аккаунта
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/user'
                  - type: object
                    properties:
                      token:
                        type: string
        '401':
          description: Не авторизован

    post:
      tags:
        - users
      requestBody:
        description: Информация для лгинизации.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userAuth'
        required: true

      responses:
        "201":
          description: Успешная авторизация.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

  /logout:
    delete:
      tags:
        - users
      summary: Выход из профиля
      description: Разлогинит пользователя

      responses:
        "205":
          description: Успешнo.

  /register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя.

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRegister'
        required: true

      responses:
        "201":
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                id:
                  type: string

        "409":
          description: Пользователь с таким email уже существует.

  /{id}/avatar:
    post:
      tags:
        - users
      summary: Загрузить изображение аватара
      description: Загружает изображение аватара пользователя. Изображение
        аватара должно быть в формате `png` или `jpg`.
      parameters:
        - name: id
          in: path
          description: Идентификатор пользователя
          required: true
          schema:
            type: string

components:
  responses:
    unauthorizedError:
      description: Пользователь не авторизован
  schemas:
    city:
      type: object
      properties:
        name:
          type: string
          enum:
            - Paris
            - Cologne
            - Brussels
            - Amsterdam
            - Hamburg
            - Dusseldorf
        location:
          $ref: '#/components/schemas/location'

    location:
      type: object
      properties:
        latitude:
          type: number
        longitude:
            type: number

    newOffer:
      type: object
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1024
        city:
          $ref: '#/components/schemas/city'
        previewImage:
          type: string
          format: uri
        isPremium:
          type: boolean
        type:
          type: string
          enum:
            - apartment
            - house
            - room
            - hotel
        bedrooms:
          type: integer
          minimum: 1
          maximum: 8
        maxAdults:
          type: integer
          minimum: 1
          maximum: 10
        price:
          type: number
          minimum: 100
          maximum: 100000
        goods:
          type: array
          items:
            type: string
            enum:
              - Breakfast
              - Air conditioning
              - Laptop friendly workspace
              - Baby seat
              - Washer
              - Towels
              - Fridge
        location:
          $ref: '#/components/schemas/location'
        images:
          type: array
          items:
            type: string
            format: uri
          minItems: 6
          maxItems: 6
      required:
        - title
        - description
        - city
        - previewImage
        - isPremium
        - type
        - bedrooms
        - maxAdults
        - price
        - goods
        - location
        - images

    offer:
      type: object
      properties:
        id:
          type: string
        price:
          type: number
          minimum: 100
          maximum: 100000
        rating:
          type: number
          minimum: 1
          maximum: 5
        title:
          type: string
          minLength: 10
          maxLength: 100
        isPremium:
          type: boolean
        isFavorite:
          type: boolean
        city:
          $ref: '#/components/schemas/city'
        location:
          $ref: '#/components/schemas/location'
        previewImage:
          type: string
          format: uri
        type:
          type: string
          enum:
            - apartment
            - house
            - room
            - hotel
        bedrooms:
          type: integer
          minimum: 1
          maximum: 8
        description:
          type: string
          minLength: 20
          maxLength: 1024
        goods:
          type: array
          items:
            type: string
            enum:
              - Breakfast
              - Air conditioning
              - Laptop friendly workspace
              - Baby seat
              - Washer
              - Towels
              - Fridge
        host:
          $ref: '#/components/schemas/user'
        images:
          type: array
          items:
            type: string
            format: uri
          minItems: 6
          maxItems: 6
        maxAdults:
          type: integer
          minimum: 1
          maximum: 10
      required:
        - id
        - price
        - rating
        - title
        - isPremium
        - isFavorite
        - city
        - location
        - previewImage
        - type
        - bedrooms
        - description
        - goods
        - host
        - images
        - maxAdults

    user:
      type: object

      properties:
        name:
          type: string
          example: keks

        avatarUrl:
          type: string

        type:
          type: string
          enum:
            - pro
            - regular

        email:
          type: string
          example: keks@htmlacademy.ru

    userAuth:
      type: object

      properties:
        email:
          type: string
          example: keks@htmlacademy.ru

        password:
          type: string
          minLength: 6
          maxLength: 12
          example: 123456

    userRegister:
      type: object

      properties:
        name:
          type: string
          example: keks

        type:
          type: string
          enum:
            - pro
            - regular

        email:
          type: string
          example: keks@htmlacademy.ru

        password:
          type: string
          minLength: 6
          maxLength: 12
          example: 123456

        avatar:
          type: object

    сomment:
      type: object
      properties:
        id:
          type: string
        comment:
          type: string
          minLength: 5
          maxLength: 1024
        date:
          type: string
          format: date-time
        rating:
          type: number
          minimum: 1
          maximum: 5
        user:
          $ref: '#/components/schemas/user'
      required:
        - id
        - comment
        - date
        - rating
        - user

    newComment:
      type: object
      properties:
        comment:
          type: string
          minLength: 5
          maxLength: 1024
        rating:
          type: number
          minimum: 1
          maximum: 5
      required:
        - comment
        - rating

    commentAuth:
      type: object
      properties:
        comment:
          type: string
          minLength: 5
          maxLength: 1024
        rating:
          type: number
          minimum: 1
          maximum: 5
        id:
          type: string
      required:
        - comment
        - rating
        - id

    favoriteAuth:
      type: object
      properties:
        id:
          type: string
      required:
        - id
